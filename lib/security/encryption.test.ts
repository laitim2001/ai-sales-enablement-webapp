/**
 * Ë≥áÊñôÂä†ÂØÜÂ∑•ÂÖ∑Ê∏¨Ë©¶Â•ó‰ª∂
 *
 * Ê∏¨Ë©¶ÁØÑÂúçÔºö
 * - Âü∫Êú¨Âä†ÂØÜ/Ëß£ÂØÜÂäüËÉΩ
 * - ÊâπÈáèÊ¨Ñ‰ΩçÂä†ÂØÜ/Ëß£ÂØÜ
 * - ÈáëÈë∞ÁÆ°ÁêÜÂíåÈ©óË≠â
 * - ÂìàÂ∏åÂíå‰ª§ÁâåÁîüÊàê
 * - ÈåØË™§ËôïÁêÜÂíåÈÇäÁïåÊÉÖÊ≥Å
 * - Âä†ÂØÜË≥áÊñôÂÆåÊï¥ÊÄßÈ©óË≠â
 *
 * @author Claude Code
 * @date 2025-10-01
 */

import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';
import {
  EncryptionService,
  encrypt,
  decrypt,
  hash,
  generateToken,
  generateEncryptionKey,
} from './encryption';

describe('EncryptionService', () => {
  let encryptionService: EncryptionService;
  let originalEnv: NodeJS.ProcessEnv;

  beforeEach(() => {
    // ‰øùÂ≠òÂéüÂßãÁí∞Â¢ÉËÆäÊï∏
    originalEnv = { ...process.env };

    // Ë®≠ÁΩÆÊ∏¨Ë©¶Áî®Âä†ÂØÜÈáëÈë∞
    process.env.ENCRYPTION_KEY = Buffer.from('a'.repeat(32)).toString('base64');

    // ÈáçÁΩÆÂñÆ‰æãÂØ¶‰æãÔºàÈÄöÈÅéÂèçÂ∞ÑÔºâ
    (EncryptionService as any).instance = undefined;

    encryptionService = EncryptionService.getInstance();
  });

  afterEach(() => {
    // ÊÅ¢Âæ©Áí∞Â¢ÉËÆäÊï∏
    process.env = originalEnv;
  });

  describe('ÂñÆ‰æãÊ®°Âºè', () => {
    it('ÊáâË©≤ËøîÂõûÁõ∏ÂêåÁöÑÂØ¶‰æã', () => {
      const instance1 = EncryptionService.getInstance();
      const instance2 = EncryptionService.getInstance();

      expect(instance1).toBe(instance2);
    });
  });

  describe('Âü∫Êú¨Âä†ÂØÜ/Ëß£ÂØÜ', () => {
    it('ÊáâË©≤ÊàêÂäüÂä†ÂØÜÂíåËß£ÂØÜÁ∞°ÂñÆÂ≠óÁ¨¶‰∏≤', async () => {
      const plaintext = 'Hello, World!';
      const encrypted = await encryptionService.encrypt(plaintext);
      const decrypted = await encryptionService.decrypt(encrypted);

      expect(encrypted).not.toBe(plaintext);
      expect(decrypted).toBe(plaintext);
    });

    it('ÊáâË©≤ÊàêÂäüÂä†ÂØÜÂíåËß£ÂØÜÁ©∫Â≠óÁ¨¶‰∏≤', async () => {
      const plaintext = '';
      const encrypted = await encryptionService.encrypt(plaintext);
      const decrypted = await encryptionService.decrypt(encrypted);

      expect(decrypted).toBe(plaintext);
    });

    it('ÊáâË©≤ÊàêÂäüÂä†ÂØÜÂíåËß£ÂØÜÈï∑Â≠óÁ¨¶‰∏≤', async () => {
      const plaintext = 'a'.repeat(10000);
      const encrypted = await encryptionService.encrypt(plaintext);
      const decrypted = await encryptionService.decrypt(encrypted);

      expect(decrypted).toBe(plaintext);
    });

    it('ÊáâË©≤ÊàêÂäüÂä†ÂØÜÂíåËß£ÂØÜÂåÖÂê´ÁâπÊÆäÂ≠óÁ¨¶ÁöÑÂ≠óÁ¨¶‰∏≤', async () => {
      const plaintext = 'Ê∏¨Ë©¶ÔºÅ@#$%^&*()_+-=[]{}|;:\'",.<>?/~`';
      const encrypted = await encryptionService.encrypt(plaintext);
      const decrypted = await encryptionService.decrypt(encrypted);

      expect(decrypted).toBe(plaintext);
    });

    it('ÊáâË©≤ÊàêÂäüÂä†ÂØÜÂíåËß£ÂØÜ Unicode Â≠óÁ¨¶', async () => {
      const plaintext = '‰Ω†Â•Ω‰∏ñÁïå üåç „Åì„Çì„Å´„Å°„ÅØ ÿßŸÑÿπÿßŸÑŸÖ';
      const encrypted = await encryptionService.encrypt(plaintext);
      const decrypted = await encryptionService.decrypt(encrypted);

      expect(decrypted).toBe(plaintext);
    });

    it('ÊØèÊ¨°Âä†ÂØÜÁõ∏ÂêåÊòéÊñáÊáâË©≤Áî¢Áîü‰∏çÂêåÂØÜÊñáÔºàÂõ†ÁÇ∫Èö®Ê©üIVÔºâ', async () => {
      const plaintext = 'Same plaintext';
      const encrypted1 = await encryptionService.encrypt(plaintext);
      const encrypted2 = await encryptionService.encrypt(plaintext);

      expect(encrypted1).not.toBe(encrypted2);
      expect(await encryptionService.decrypt(encrypted1)).toBe(plaintext);
      expect(await encryptionService.decrypt(encrypted2)).toBe(plaintext);
    });
  });

  describe('Âä†ÂØÜË≥áÊñôÊ†ºÂºèÂíåÂÆåÊï¥ÊÄß', () => {
    it('Âä†ÂØÜÁµêÊûúÊáâË©≤ÊòØÊúâÊïàÁöÑ Base64 Â≠óÁ¨¶‰∏≤', async () => {
      const plaintext = 'Test data';
      const encrypted = await encryptionService.encrypt(plaintext);

      // Base64 Ê≠£ÂâáË°®ÈÅîÂºè
      const base64Regex = /^[A-Za-z0-9+/]*={0,2}$/;
      expect(base64Regex.test(encrypted)).toBe(true);
    });

    it('Âä†ÂØÜË≥áÊñôÊáâË©≤ÂåÖÂê´ÁâàÊú¨„ÄÅIV„ÄÅË™çË≠âÊ®ôÁ±§', async () => {
      const plaintext = 'Test data';
      const encrypted = await encryptionService.encrypt(plaintext);

      // Ëß£Á¢º‰∏¶Ëß£ÊûêÂä†ÂØÜË≥áÊñôÁµêÊßã
      const decoded = Buffer.from(encrypted, 'base64').toString('utf8');
      const parsed = JSON.parse(decoded);

      expect(parsed).toHaveProperty('version');
      expect(parsed).toHaveProperty('iv');
      expect(parsed).toHaveProperty('authTag');
      expect(parsed).toHaveProperty('encrypted');
    });

    it('ÁØ°ÊîπÂä†ÂØÜË≥áÊñôÊáâË©≤Â∞éËá¥Ëß£ÂØÜÂ§±Êïó', async () => {
      const plaintext = 'Sensitive data';
      const encrypted = await encryptionService.encrypt(plaintext);

      // ÁØ°ÊîπË™çË≠âÊ®ôÁ±§ÔºàÈÄôËÇØÂÆöÊúÉË¢´Ê™¢Ê∏¨Âà∞Ôºâ
      const decoded = Buffer.from(encrypted, 'base64').toString('utf8');
      const parsed = JSON.parse(decoded);

      // ‰øÆÊîπË™çË≠âÊ®ôÁ±§ÁöÑ‰∏ÄÂÄãÂ≠óÁ¨¶
      const authTagBuffer = Buffer.from(parsed.authTag, 'base64');
      authTagBuffer[0] = (authTagBuffer[0] + 1) % 256;
      parsed.authTag = authTagBuffer.toString('base64');

      const tampered = Buffer.from(JSON.stringify(parsed)).toString('base64');

      // Ëß£ÂØÜÊáâË©≤Â§±Êïó
      await expect(async () => {
        await encryptionService.decrypt(tampered);
      }).rejects.toThrow(/integrity check failed|Decryption failed/i);
    });

    it('‰ΩøÁî®ÈåØË™§ÁâàÊú¨ÁöÑÂä†ÂØÜË≥áÊñôÊáâË©≤ÊããÂá∫ÈåØË™§', async () => {
      const plaintext = 'Test data';
      const encrypted = await encryptionService.encrypt(plaintext);

      // ‰øÆÊîπÁâàÊú¨
      const decoded = Buffer.from(encrypted, 'base64').toString('utf8');
      const parsed = JSON.parse(decoded);
      parsed.version = 'v2';
      const modified = Buffer.from(JSON.stringify(parsed)).toString('base64');

      await expect(async () => {
        await encryptionService.decrypt(modified);
      }).rejects.toThrow(/Unsupported encryption version/);
    });
  });

  describe('ÊâπÈáèÊ¨Ñ‰ΩçÂä†ÂØÜ/Ëß£ÂØÜ', () => {
    it('ÊáâË©≤ÊàêÂäüÂä†ÂØÜÁâ©‰ª∂‰∏≠ÁöÑÊåáÂÆöÊ¨Ñ‰Ωç', async () => {
      const data = {
        id: 1,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '+1-234-567-8900',
        public_field: 'Public data',
      };

      const encrypted = await encryptionService.encryptFields(data, ['email', 'phone']);

      expect(encrypted.id).toBe(data.id);
      expect(encrypted.name).toBe(data.name);
      expect(encrypted.email).not.toBe(data.email);
      expect(encrypted.phone).not.toBe(data.phone);
      expect(encrypted.public_field).toBe(data.public_field);
    });

    it('ÊáâË©≤ÊàêÂäüËß£ÂØÜÁâ©‰ª∂‰∏≠ÁöÑÊåáÂÆöÊ¨Ñ‰Ωç', async () => {
      const data = {
        id: 1,
        email: 'john@example.com',
        phone: '+1-234-567-8900',
      };

      const encrypted = await encryptionService.encryptFields(data, ['email', 'phone']);
      const decrypted = await encryptionService.decryptFields(encrypted, ['email', 'phone']);

      expect(decrypted.email).toBe(data.email);
      expect(decrypted.phone).toBe(data.phone);
    });

    it('ÊâπÈáèÂä†ÂØÜÊáâË©≤‰∏ç‰øÆÊîπÂéüÂßãÁâ©‰ª∂', async () => {
      const data = {
        email: 'test@example.com',
        phone: '123456',
      };

      const originalEmail = data.email;
      const encrypted = await encryptionService.encryptFields(data, ['email']);

      expect(data.email).toBe(originalEmail);
      expect(encrypted.email).not.toBe(originalEmail);
    });

    it('ÊâπÈáèÂä†ÂØÜÊáâË©≤Ë∑≥ÈÅéÁ©∫ÂÄºÂíåÈùûÂ≠óÁ¨¶‰∏≤Ê¨Ñ‰Ωç', async () => {
      const data = {
        email: 'test@example.com',
        phone: '',
        age: 30,
        active: true,
      };

      const encrypted = await encryptionService.encryptFields(data, ['email', 'phone', 'age', 'active'] as any);

      expect(encrypted.email).not.toBe(data.email);
      expect(encrypted.phone).toBe('');
      expect(encrypted.age).toBe(30);
      expect(encrypted.active).toBe(true);
    });
  });

  describe('ÂìàÂ∏åÂäüËÉΩ', () => {
    it('ÊáâË©≤ÁîüÊàê‰∏ÄËá¥ÁöÑÂìàÂ∏åÂÄº', () => {
      const data = 'Test data';
      const hash1 = encryptionService.hash(data);
      const hash2 = encryptionService.hash(data);

      expect(hash1).toBe(hash2);
      expect(hash1).toHaveLength(64); // SHA-256 hex = 64 characters
    });

    it('‰∏çÂêåË≥áÊñôÊáâË©≤Áî¢Áîü‰∏çÂêåÂìàÂ∏åÂÄº', () => {
      const hash1 = encryptionService.hash('Data 1');
      const hash2 = encryptionService.hash('Data 2');

      expect(hash1).not.toBe(hash2);
    });

    it('ÊáâË©≤ÊîØÊè¥‰ΩøÁî®ÈπΩÂÄº', () => {
      const data = 'Test data';
      const salt = 'random_salt';

      const hash1 = encryptionService.hash(data);
      const hash2 = encryptionService.hash(data, salt);

      expect(hash1).not.toBe(hash2);
    });

    it('Áõ∏ÂêåÈπΩÂÄºÊáâË©≤Áî¢Áîü‰∏ÄËá¥ÂìàÂ∏å', () => {
      const data = 'Test data';
      const salt = 'same_salt';

      const hash1 = encryptionService.hash(data, salt);
      const hash2 = encryptionService.hash(data, salt);

      expect(hash1).toBe(hash2);
    });
  });

  describe('‰ª§ÁâåÁîüÊàê', () => {
    it('ÊáâË©≤ÁîüÊàêÊåáÂÆöÈï∑Â∫¶ÁöÑ‰ª§Áâå', () => {
      const token = EncryptionService.generateToken(16, 'hex');
      expect(token).toHaveLength(32); // 16 bytes = 32 hex characters
    });

    it('ÊáâË©≤ÁîüÊàê‰∏çÂêåÁöÑÈö®Ê©ü‰ª§Áâå', () => {
      const token1 = EncryptionService.generateToken();
      const token2 = EncryptionService.generateToken();

      expect(token1).not.toBe(token2);
    });

    it('ÊáâË©≤ÊîØÊè¥ base64url Á∑®Á¢ºÔºàURL ÂÆâÂÖ®Ôºâ', () => {
      const token = EncryptionService.generateToken(32, 'base64url');

      // base64url ‰∏çÊáâÂåÖÂê´ +, /, = Â≠óÁ¨¶
      expect(token).not.toMatch(/[+/=]/);
    });

    it('ÊáâË©≤ÊîØÊè¥ hex Á∑®Á¢º', () => {
      const token = EncryptionService.generateToken(16, 'hex');
      expect(/^[0-9a-f]+$/.test(token)).toBe(true);
    });
  });

  describe('ÈáëÈë∞ÁÆ°ÁêÜ', () => {
    it('ÊáâË©≤ÁîüÊàêÊúâÊïàÈï∑Â∫¶ÁöÑÂä†ÂØÜÈáëÈë∞', () => {
      const key = EncryptionService.generateNewKey();
      const keyBuffer = Buffer.from(key, 'base64');

      expect(keyBuffer).toHaveLength(32); // 256‰Ωç = 32Â≠óÁØÄ
    });

    it('ÊáâË©≤È©óË≠âÊúâÊïàÁöÑÈáëÈë∞Ê†ºÂºè', () => {
      const validKey = Buffer.from('a'.repeat(32)).toString('base64');
      expect(EncryptionService.validateKey(validKey)).toBe(true);
    });

    it('ÊáâË©≤ÊãíÁµïÁÑ°ÊïàÈï∑Â∫¶ÁöÑÈáëÈë∞', () => {
      const invalidKey = Buffer.from('a'.repeat(16)).toString('base64');
      expect(EncryptionService.validateKey(invalidKey)).toBe(false);
    });

    it('ÊáâË©≤ÊãíÁµïÈùû Base64 Ê†ºÂºèÁöÑÈáëÈë∞', () => {
      const invalidKey = 'not_base64!@#$%^&*()';
      expect(EncryptionService.validateKey(invalidKey)).toBe(false);
    });

    it('ÁîüÁî¢Áí∞Â¢ÉÁº∫Â∞ë ENCRYPTION_KEY ÊáâË©≤ÊããÂá∫ÈåØË™§', () => {
      const originalNodeEnv = process.env.NODE_ENV
      const originalEncryptionKey = process.env.ENCRYPTION_KEY

      // ‰ΩøÁî® Object.defineProperty ‰øÆÊîπ readonly Â±¨ÊÄß
      Object.defineProperty(process.env, 'NODE_ENV', {
        value: 'production',
        writable: true,
        configurable: true,
      })
      delete process.env.ENCRYPTION_KEY
      ;(EncryptionService as any).instance = undefined

      expect(() => {
        EncryptionService.getInstance()
      }).toThrow(/ENCRYPTION_KEY must be set in production/)

      // ÊÅ¢Âæ©ÂéüÂßãÁí∞Â¢ÉËÆäÊï∏
      Object.defineProperty(process.env, 'NODE_ENV', {
        value: originalNodeEnv,
        writable: true,
        configurable: true,
      })
      if (originalEncryptionKey) {
        process.env.ENCRYPTION_KEY = originalEncryptionKey
      }
    })
  });

  describe('‰æøÂà©ÂáΩÊï∏', () => {
    it('encrypt ‰æøÂà©ÂáΩÊï∏ÊáâË©≤Ê≠£Â∏∏Â∑•‰Ωú', async () => {
      const plaintext = 'Test data';
      const encrypted = await encrypt(plaintext);
      const decrypted = await decrypt(encrypted);

      expect(decrypted).toBe(plaintext);
    });

    it('hash ‰æøÂà©ÂáΩÊï∏ÊáâË©≤Ê≠£Â∏∏Â∑•‰Ωú', () => {
      const data = 'Test data';
      const hashed = hash(data);

      expect(hashed).toHaveLength(64);
    });

    it('generateToken ‰æøÂà©ÂáΩÊï∏ÊáâË©≤Ê≠£Â∏∏Â∑•‰Ωú', () => {
      const token = generateToken();
      expect(token.length).toBeGreaterThan(0);
    });

    it('generateEncryptionKey ‰æøÂà©ÂáΩÊï∏ÊáâË©≤Ê≠£Â∏∏Â∑•‰Ωú', () => {
      const key = generateEncryptionKey();
      expect(EncryptionService.validateKey(key)).toBe(true);
    });
  });

  describe('ÈåØË™§ËôïÁêÜ', () => {
    it('Ëß£ÂØÜÁÑ°ÊïàË≥áÊñôÊáâË©≤ÊããÂá∫ÈåØË™§', async () => {
      await expect(async () => {
        await encryptionService.decrypt('invalid_encrypted_data');
      }).rejects.toThrow(/Decryption failed/);
    });

    it('Ëß£ÂØÜÁ©∫Â≠óÁ¨¶‰∏≤ÊáâË©≤ÊããÂá∫ÈåØË™§', async () => {
      await expect(async () => {
        await encryptionService.decrypt('');
      }).rejects.toThrow();
    });

    it('Ëß£ÂØÜÈùû JSON Ê†ºÂºèÊáâË©≤ÊããÂá∫ÈåØË™§', async () => {
      const invalidData = Buffer.from('not json data').toString('base64');

      await expect(async () => {
        await encryptionService.decrypt(invalidData);
      }).rejects.toThrow(/Decryption failed/);
    });
  });

  describe('ÊÄßËÉΩÊ∏¨Ë©¶', () => {
    it('ÊáâË©≤Âø´ÈÄüÂÆåÊàêÂ§ßÈáèÂä†ÂØÜÊìç‰Ωú', async () => {
      const iterations = 1000;
      const plaintext = 'Performance test data';

      const startTime = Date.now();

      for (let i = 0; i < iterations; i++) {
        await encryptionService.encrypt(plaintext);
      }

      const endTime = Date.now();
      const duration = endTime - startTime;

      // 1000Ê¨°Âä†ÂØÜÊáâË©≤Âú® 1 ÁßíÂÖßÂÆåÊàê
      expect(duration).toBeLessThan(1000);

      console.log(`[Performance] ${iterations} encryptions in ${duration}ms (avg: ${(duration / iterations).toFixed(2)}ms)`);
    });

    it('ÊáâË©≤Âø´ÈÄüÂÆåÊàêÂ§ßÈáèËß£ÂØÜÊìç‰Ωú', async () => {
      const iterations = 1000;
      const plaintext = 'Performance test data';
      const encrypted = await encryptionService.encrypt(plaintext);

      const startTime = Date.now();

      for (let i = 0; i < iterations; i++) {
        await encryptionService.decrypt(encrypted);
      }

      const endTime = Date.now();
      const duration = endTime - startTime;

      // 1000Ê¨°Ëß£ÂØÜÊáâË©≤Âú® 1 ÁßíÂÖßÂÆåÊàê
      expect(duration).toBeLessThan(1000);

      console.log(`[Performance] ${iterations} decryptions in ${duration}ms (avg: ${(duration / iterations).toFixed(2)}ms)`);
    });
  });

  describe('ÂØ¶Èöõ‰ΩøÁî®Â†¥ÊôØ', () => {
    it('ÊáâË©≤ÊàêÂäüÂä†ÂØÜÂÆ¢Êà∂ÊïèÊÑüË≥áÊñô', async () => {
      const customer = {
        id: 1,
        name: 'ABC Company',
        email: 'contact@abc.com',
        phone: '+60-12-345-6789',
        address: '123 Main St, Kuala Lumpur',
        created_at: new Date(),
      };

      // Âä†ÂØÜÊïèÊÑüÊ¨Ñ‰Ωç
      const encrypted = await encryptionService.encryptFields(customer, ['email', 'phone', 'address']);

      expect(encrypted.name).toBe(customer.name);
      expect(encrypted.email).not.toBe(customer.email);
      expect(encrypted.phone).not.toBe(customer.phone);
      expect(encrypted.address).not.toBe(customer.address);

      // Ëß£ÂØÜÈ©óË≠â
      const decrypted = await encryptionService.decryptFields(encrypted, ['email', 'phone', 'address']);

      expect(decrypted.email).toBe(customer.email);
      expect(decrypted.phone).toBe(customer.phone);
      expect(decrypted.address).toBe(customer.address);
    });

    it('ÊáâË©≤ÊàêÂäüÁîüÊàêÂíåÂìàÂ∏å API Key', () => {
      // ÁîüÊàê API Key
      const apiKey = `sk_live_${EncryptionService.generateToken(24, 'base64url')}`;

      // ÂìàÂ∏åÂÑ≤Â≠òÔºà‰∏çÂèØÈÄÜÔºâ
      const apiKeyHash = encryptionService.hash(apiKey);

      expect(apiKey).toMatch(/^sk_live_/);
      expect(apiKeyHash).toHaveLength(64);

      // È©óË≠âÔºö‰ΩøÁî®Áõ∏Âêå API Key ÁîüÊàêÁõ∏ÂêåÂìàÂ∏å
      const verifyHash = encryptionService.hash(apiKey);
      expect(verifyHash).toBe(apiKeyHash);
    });

    it('ÊáâË©≤ÊàêÂäüËôïÁêÜÊèêÊ°àÂÖßÂÆπÂä†ÂØÜ', async () => {
      const proposal = {
        id: 1,
        title: 'Enterprise Solution Proposal',
        content: 'Confidential proposal content with sensitive pricing information...',
        customer_notes: 'Internal notes about customer requirements',
        status: 'DRAFT',
      };

      // Âä†ÂØÜÊ©üÂØÜÂÖßÂÆπ
      const encrypted = await encryptionService.encryptFields(proposal, ['content', 'customer_notes']);

      expect(encrypted.title).toBe(proposal.title);
      expect(encrypted.content).not.toBe(proposal.content);
      expect(encrypted.customer_notes).not.toBe(proposal.customer_notes);

      // Ëß£ÂØÜ
      const decrypted = await encryptionService.decryptFields(encrypted, ['content', 'customer_notes']);

      expect(decrypted.content).toBe(proposal.content);
      expect(decrypted.customer_notes).toBe(proposal.customer_notes);
    });
  });
});
