/**
 * 會議準備包管理器
 *
 * 功能：
 * - 會議準備包數據模型
 * - 智能準備包生成
 * - 模板系統
 * - 內容推薦
 *
 * 作者：Claude Code
 * 日期：2025-10-05
 */

import { PrismaClient } from '@prisma/client';

/**
 * 準備包類型
 */
export enum PrepPackageType {
  SALES_MEETING = 'SALES_MEETING',           // 銷售會議
  CLIENT_PRESENTATION = 'CLIENT_PRESENTATION', // 客戶簡報
  INTERNAL_REVIEW = 'INTERNAL_REVIEW',       // 內部審查
  PROPOSAL_DISCUSSION = 'PROPOSAL_DISCUSSION', // 提案討論
  TRAINING_SESSION = 'TRAINING_SESSION',     // 培訓會議
  CUSTOM = 'CUSTOM',                          // 自定義
}

/**
 * 準備包狀態
 */
export enum PrepPackageStatus {
  DRAFT = 'DRAFT',           // 草稿
  READY = 'READY',           // 就緒
  IN_USE = 'IN_USE',         // 使用中
  COMPLETED = 'COMPLETED',   // 已完成
  ARCHIVED = 'ARCHIVED',     // 已歸檔
}

/**
 * 準備包項目類型
 */
export enum PrepItemType {
  KNOWLEDGE_BASE = 'KNOWLEDGE_BASE',   // 知識庫文檔
  PROPOSAL = 'PROPOSAL',               // 提案
  TEMPLATE = 'TEMPLATE',               // 模板
  CUSTOMER_INFO = 'CUSTOMER_INFO',     // 客戶信息
  TALKING_POINTS = 'TALKING_POINTS',   // 談話要點
  FAQ = 'FAQ',                         // 常見問題
  COMPETITOR_ANALYSIS = 'COMPETITOR_ANALYSIS', // 競爭分析
  PRICING_INFO = 'PRICING_INFO',       // 價格信息
  CASE_STUDY = 'CASE_STUDY',          // 案例研究
  DEMO_SCRIPT = 'DEMO_SCRIPT',        // 演示腳本
}

/**
 * 準備包項目
 */
export interface PrepPackageItem {
  id: string;
  type: PrepItemType;
  contentId?: number;        // 關聯內容ID
  title: string;
  description?: string;
  content?: string;          // 自定義內容
  url?: string;              // 外部連結
  order: number;             // 排序順序
  isRequired: boolean;       // 是否必需
  metadata?: {
    estimatedReadTime?: number; // 預計閱讀時間（分鐘）
    keywords?: string[];
    relatedItems?: string[];    // 關聯項目ID
    [key: string]: any;
  };
}

/**
 * 會議準備包
 */
export interface MeetingPrepPackage {
  id: string;
  userId: number;
  meetingId?: number;        // 關聯會議ID
  type: PrepPackageType;
  title: string;
  description?: string;
  status: PrepPackageStatus;
  items: PrepPackageItem[];
  metadata: {
    meetingDate?: Date;
    attendees?: string[];
    objectives?: string[];
    customerName?: string;
    totalEstimatedReadTime?: number;
    autoGenerated?: boolean;
    templateId?: string;
    [key: string]: any;
  };
  createdAt: Date;
  updatedAt: Date;
  completedAt?: Date;
}

/**
 * 準備包模板
 */
export interface PrepPackageTemplate {
  id: string;
  name: string;
  type: PrepPackageType;
  description?: string;
  defaultItems: Omit<PrepPackageItem, 'id'>[];
  metadata?: {
    category?: string;
    tags?: string[];
    usageCount?: number;
    [key: string]: any;
  };
}

/**
 * 會議準備包管理器
 */
export class MeetingPrepPackageManager {
  private prisma: PrismaClient;

  constructor(prisma: PrismaClient) {
    this.prisma = prisma;
  }

  /**
   * 創建準備包
   */
  async createPrepPackage(
    packageData: Omit<MeetingPrepPackage, 'id' | 'createdAt' | 'updatedAt'>
  ): Promise<MeetingPrepPackage> {
    const prepPackage: MeetingPrepPackage = {
      id: this.generatePackageId(),
      ...packageData,
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    await this.storePrepPackage(prepPackage);
    return prepPackage;
  }

  /**
   * 從模板創建準備包
   */
  async createFromTemplate(
    templateId: string,
    userId: number,
    customData?: {
      title?: string;
      description?: string;
      meetingId?: number;
      metadata?: MeetingPrepPackage['metadata'];
    }
  ): Promise<MeetingPrepPackage> {
    const template = await this.getTemplate(templateId);

    if (!template) {
      throw new Error(`Template ${templateId} not found`);
    }

    const items: PrepPackageItem[] = template.defaultItems.map((item, index) => ({
      id: this.generateItemId(),
      ...item,
      order: index,
    }));

    const prepPackage = await this.createPrepPackage({
      userId,
      meetingId: customData?.meetingId,
      type: template.type,
      title: customData?.title || template.name,
      description: customData?.description || template.description,
      status: PrepPackageStatus.DRAFT,
      items,
      metadata: {
        ...customData?.metadata,
        templateId: template.id,
        autoGenerated: true,
      },
    });

    // 更新模板使用次數
    if (template.metadata) {
      template.metadata.usageCount = (template.metadata.usageCount || 0) + 1;
      await this.updateTemplate(template);
    }

    return prepPackage;
  }

  /**
   * 智能生成準備包
   */
  async autoGeneratePrepPackage(
    userId: number,
    meetingInfo: {
      meetingId?: number;
      meetingDate?: Date;
      attendees?: string[];
      objectives?: string[];
      customerName?: string;
      customerIndustry?: string;
      meetingType?: PrepPackageType;
    }
  ): Promise<MeetingPrepPackage> {
    const items: PrepPackageItem[] = [];
    let order = 0;

    // 1. 添加客戶信息（如果有客戶名稱）
    if (meetingInfo.customerName) {
      items.push({
        id: this.generateItemId(),
        type: PrepItemType.CUSTOMER_INFO,
        title: `${meetingInfo.customerName} 客戶資料`,
        description: '客戶背景、需求、歷史互動記錄',
        isRequired: true,
        order: order++,
        metadata: {
          estimatedReadTime: 10,
        },
      });
    }

    // 2. 添加會議目標相關的談話要點
    if (meetingInfo.objectives && meetingInfo.objectives.length > 0) {
      items.push({
        id: this.generateItemId(),
        type: PrepItemType.TALKING_POINTS,
        title: '會議談話要點',
        content: meetingInfo.objectives.map((obj) => `• ${obj}`).join('\n'),
        isRequired: true,
        order: order++,
        metadata: {
          estimatedReadTime: 5,
        },
      });
    }

    // 3. 根據會議類型添加相應內容
    const meetingType = meetingInfo.meetingType || PrepPackageType.SALES_MEETING;

    switch (meetingType) {
      case PrepPackageType.SALES_MEETING:
        items.push(
          {
            id: this.generateItemId(),
            type: PrepItemType.PRICING_INFO,
            title: '產品定價信息',
            description: '最新價格表和優惠方案',
            isRequired: true,
            order: order++,
            metadata: { estimatedReadTime: 5 },
          },
          {
            id: this.generateItemId(),
            type: PrepItemType.CASE_STUDY,
            title: '成功案例',
            description: '相關行業的成功案例',
            isRequired: false,
            order: order++,
            metadata: { estimatedReadTime: 10 },
          }
        );
        break;

      case PrepPackageType.CLIENT_PRESENTATION:
        items.push(
          {
            id: this.generateItemId(),
            type: PrepItemType.DEMO_SCRIPT,
            title: '演示腳本',
            description: '產品演示流程和關鍵點',
            isRequired: true,
            order: order++,
            metadata: { estimatedReadTime: 15 },
          },
          {
            id: this.generateItemId(),
            type: PrepItemType.FAQ,
            title: '常見問題解答',
            description: '客戶可能提出的問題及答案',
            isRequired: true,
            order: order++,
            metadata: { estimatedReadTime: 10 },
          }
        );
        break;

      case PrepPackageType.PROPOSAL_DISCUSSION:
        items.push({
          id: this.generateItemId(),
          type: PrepItemType.PROPOSAL,
          title: '提案文檔',
          description: '待討論的提案內容',
          isRequired: true,
          order: order++,
          metadata: { estimatedReadTime: 20 },
        });
        break;
    }

    // 4. 添加競爭分析（銷售和簡報會議）
    if (
      meetingType === PrepPackageType.SALES_MEETING ||
      meetingType === PrepPackageType.CLIENT_PRESENTATION
    ) {
      items.push({
        id: this.generateItemId(),
        type: PrepItemType.COMPETITOR_ANALYSIS,
        title: '競爭對手分析',
        description: '主要競爭對手的優劣勢對比',
        isRequired: false,
        order: order++,
        metadata: { estimatedReadTime: 8 },
      });
    }

    // 計算總預計閱讀時間
    const totalEstimatedReadTime = items.reduce(
      (sum, item) => sum + (item.metadata?.estimatedReadTime || 0),
      0
    );

    // 創建準備包
    const prepPackage = await this.createPrepPackage({
      userId,
      meetingId: meetingInfo.meetingId,
      type: meetingType,
      title: `${meetingInfo.customerName || '會議'} 準備資料`,
      description: `自動生成的會議準備包 - ${meetingInfo.meetingDate?.toLocaleDateString('zh-TW') || '待定'}`,
      status: PrepPackageStatus.DRAFT,
      items,
      metadata: {
        meetingDate: meetingInfo.meetingDate,
        attendees: meetingInfo.attendees,
        objectives: meetingInfo.objectives,
        customerName: meetingInfo.customerName,
        totalEstimatedReadTime,
        autoGenerated: true,
      },
    });

    return prepPackage;
  }

  /**
   * 獲取準備包
   */
  async getPrepPackage(packageId: string): Promise<MeetingPrepPackage | null> {
    if (typeof global !== 'undefined' && (global as any).prepPackages) {
      return (global as any).prepPackages.get(packageId) || null;
    }
    return null;
  }

  /**
   * 獲取用戶的準備包列表
   */
  async getUserPrepPackages(
    userId: number,
    options?: {
      status?: PrepPackageStatus;
      type?: PrepPackageType;
      limit?: number;
    }
  ): Promise<MeetingPrepPackage[]> {
    const allPackages = await this.getAllPrepPackages();

    let filtered = allPackages.filter((p) => p.userId === userId);

    if (options?.status) {
      filtered = filtered.filter((p) => p.status === options.status);
    }

    if (options?.type) {
      filtered = filtered.filter((p) => p.type === options.type);
    }

    // 按更新時間倒序排序
    filtered.sort((a, b) => b.updatedAt.getTime() - a.updatedAt.getTime());

    if (options?.limit) {
      filtered = filtered.slice(0, options.limit);
    }

    return filtered;
  }

  /**
   * 更新準備包
   */
  async updatePrepPackage(
    packageId: string,
    updates: Partial<Omit<MeetingPrepPackage, 'id' | 'userId' | 'createdAt'>>
  ): Promise<MeetingPrepPackage> {
    const prepPackage = await this.getPrepPackage(packageId);

    if (!prepPackage) {
      throw new Error(`Prep package ${packageId} not found`);
    }

    const updated: MeetingPrepPackage = {
      ...prepPackage,
      ...updates,
      updatedAt: new Date(),
    };

    await this.storePrepPackage(updated);
    return updated;
  }

  /**
   * 添加項目到準備包
   */
  async addItem(
    packageId: string,
    item: Omit<PrepPackageItem, 'id' | 'order'>
  ): Promise<MeetingPrepPackage> {
    const prepPackage = await this.getPrepPackage(packageId);

    if (!prepPackage) {
      throw new Error(`Prep package ${packageId} not found`);
    }

    const newItem: PrepPackageItem = {
      id: this.generateItemId(),
      ...item,
      order: prepPackage.items.length,
    };

    prepPackage.items.push(newItem);
    prepPackage.updatedAt = new Date();

    await this.storePrepPackage(prepPackage);
    return prepPackage;
  }

  /**
   * 移除項目
   */
  async removeItem(packageId: string, itemId: string): Promise<MeetingPrepPackage> {
    const prepPackage = await this.getPrepPackage(packageId);

    if (!prepPackage) {
      throw new Error(`Prep package ${packageId} not found`);
    }

    prepPackage.items = prepPackage.items.filter((item) => item.id !== itemId);
    prepPackage.updatedAt = new Date();

    await this.storePrepPackage(prepPackage);
    return prepPackage;
  }

  /**
   * 獲取模板
   */
  async getTemplate(templateId: string): Promise<PrepPackageTemplate | null> {
    const templates = await this.getDefaultTemplates();
    return templates.find((t) => t.id === templateId) || null;
  }

  /**
   * 獲取所有模板
   */
  async getAllTemplates(): Promise<PrepPackageTemplate[]> {
    return this.getDefaultTemplates();
  }

  /**
   * 更新模板
   */
  async updateTemplate(template: PrepPackageTemplate): Promise<void> {
    // 內存存儲中的模板更新邏輯
    // 生產環境應實現數據庫存儲
  }

  /**
   * 獲取默認模板
   */
  private async getDefaultTemplates(): Promise<PrepPackageTemplate[]> {
    return [
      {
        id: 'template_sales_meeting',
        name: '銷售會議準備包',
        type: PrepPackageType.SALES_MEETING,
        description: '標準銷售會議準備資料',
        defaultItems: [
          {
            type: PrepItemType.CUSTOMER_INFO,
            title: '客戶資料',
            order: 1,
            isRequired: true,
            metadata: { estimatedReadTime: 10 },
          },
          {
            type: PrepItemType.PRICING_INFO,
            title: '產品定價',
            order: 2,
            isRequired: true,
            metadata: { estimatedReadTime: 5 },
          },
          {
            type: PrepItemType.CASE_STUDY,
            title: '成功案例',
            order: 3,
            isRequired: false,
            metadata: { estimatedReadTime: 10 },
          },
        ],
        metadata: { category: 'sales', usageCount: 0 },
      },
      {
        id: 'template_client_presentation',
        name: '客戶簡報準備包',
        type: PrepPackageType.CLIENT_PRESENTATION,
        description: '客戶簡報演示準備資料',
        defaultItems: [
          {
            type: PrepItemType.DEMO_SCRIPT,
            title: '演示腳本',
            order: 1,
            isRequired: true,
            metadata: { estimatedReadTime: 15 },
          },
          {
            type: PrepItemType.FAQ,
            title: '常見問題',
            order: 2,
            isRequired: true,
            metadata: { estimatedReadTime: 10 },
          },
        ],
        metadata: { category: 'presentation', usageCount: 0 },
      },
    ];
  }

  // 內存存儲實現（生產環境應使用數據庫）
  private generatePackageId(): string {
    return `prep_package_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`;
  }

  private generateItemId(): string {
    return `prep_item_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`;
  }

  private async storePrepPackage(prepPackage: MeetingPrepPackage): Promise<void> {
    if (typeof global !== 'undefined') {
      if (!(global as any).prepPackages) {
        (global as any).prepPackages = new Map<string, MeetingPrepPackage>();
      }
      (global as any).prepPackages.set(prepPackage.id, prepPackage);
    }
  }

  private async getAllPrepPackages(): Promise<MeetingPrepPackage[]> {
    if (typeof global !== 'undefined' && (global as any).prepPackages) {
      return Array.from((global as any).prepPackages.values());
    }
    return [];
  }
}

/**
 * 工廠函數：創建會議準備包管理器實例
 */
export function createMeetingPrepPackageManager(
  prisma: PrismaClient
): MeetingPrepPackageManager {
  return new MeetingPrepPackageManager(prisma);
}
