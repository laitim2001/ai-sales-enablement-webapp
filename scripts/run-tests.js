#!/usr/bin/env node

/**
 * Ê∏¨Ë©¶ÈÅãË°åËÖ≥Êú¨
 * Êèê‰æõ‰∏çÂêåÈ°ûÂûãÁöÑÊ∏¨Ë©¶ÈÅãË°åÈÅ∏È†Ö
 */

const { execSync } = require('child_process')
const path = require('path')
const fs = require('fs')

// È°èËâ≤Ëº∏Âá∫
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
}

const colorize = (color, text) => `${colors[color]}${text}${colors.reset}`

// Ê∏¨Ë©¶È°ûÂûãÈÖçÁΩÆ
const testConfigs = {
  unit: {
    name: 'ÂñÆÂÖÉÊ∏¨Ë©¶',
    command: 'npm test -- --testPathPattern="__tests__/(lib|components)" --coverage',
    description: 'ÈÅãË°åÊâÄÊúâÂñÆÂÖÉÊ∏¨Ë©¶‰∏¶ÁîüÊàêË¶ÜËìãÁéáÂ†±Âëä'
  },
  integration: {
    name: 'Êï¥ÂêàÊ∏¨Ë©¶',
    command: 'npm test -- --testPathPattern="__tests__/api" --forceExit',
    description: 'ÈÅãË°å API ÂíåÊúçÂãôÊï¥ÂêàÊ∏¨Ë©¶'
  },
  e2e: {
    name: 'E2E Ê∏¨Ë©¶',
    command: 'npm run test:e2e',
    description: 'ÈÅãË°åÁ´ØÂà∞Á´ØÊ∏¨Ë©¶ (ÈúÄË¶ÅÊáâÁî®Á®ãÂºèÈÅãË°å‰∏≠)'
  },
  ai: {
    name: 'AI ÊúçÂãôÊ∏¨Ë©¶',
    command: 'npm test -- --testPathPattern="__tests__/lib/ai"',
    description: 'Â∞àÈñÄÊ∏¨Ë©¶ AI ÊúçÂãôÊ®°ÁµÑ'
  },
  auth: {
    name: 'Ë™çË≠âÊ∏¨Ë©¶',
    command: 'npm test -- --testPathPattern="__tests__/api/auth"',
    description: 'Ê∏¨Ë©¶Ë™çË≠âÁõ∏Èóú API'
  },
  kb: {
    name: 'Áü•Ë≠òÂ∫´Ê∏¨Ë©¶',
    command: 'npm test -- --testPathPattern="tests/knowledge-base"',
    description: 'Ê∏¨Ë©¶Áü•Ë≠òÂ∫´Áõ∏Èóú API ÂíåÂäüËÉΩ'
  },
  all: {
    name: 'ÊâÄÊúâÊ∏¨Ë©¶',
    command: 'npm test -- --coverage --forceExit',
    description: 'ÈÅãË°åÊâÄÊúâÊ∏¨Ë©¶‰∏¶ÁîüÊàêÂÆåÊï¥Â†±Âëä'
  },
  watch: {
    name: 'Áõ£Ë¶ñÊ®°Âºè',
    command: 'npm run test:watch',
    description: 'Áõ£Ë¶ñÊñá‰ª∂ËÆäÂåñ‰∏¶Ëá™ÂãïÈáçÊñ∞ÈÅãË°åÊ∏¨Ë©¶'
  },
  coverage: {
    name: 'Ë¶ÜËìãÁéáÂ†±Âëä',
    command: 'npm run test:coverage',
    description: 'ÁîüÊàêË©≥Á¥∞ÁöÑÊ∏¨Ë©¶Ë¶ÜËìãÁéáÂ†±Âëä'
  }
}

// Ê™¢Êü•ÂâçÁΩÆÊ¢ù‰ª∂
function checkPrerequisites() {
  console.log(colorize('cyan', 'üîç Ê™¢Êü•Ê∏¨Ë©¶Áí∞Â¢É...'))

  // Ê™¢Êü• Jest ÈÖçÁΩÆ
  if (!fs.existsSync(path.join(__dirname, '..', 'jest.config.js'))) {
    console.log(colorize('red', '‚ùå Êâæ‰∏çÂà∞ jest.config.js'))
    process.exit(1)
  }

  // Ê™¢Êü• Jest setup Êñá‰ª∂
  if (!fs.existsSync(path.join(__dirname, '..', 'jest.setup.js'))) {
    console.log(colorize('red', '‚ùå Êâæ‰∏çÂà∞ jest.setup.js'))
    process.exit(1)
  }

  // Ê™¢Êü•Ê∏¨Ë©¶ÁõÆÈåÑ
  if (!fs.existsSync(path.join(__dirname, '..', '__tests__'))) {
    console.log(colorize('red', '‚ùå Êâæ‰∏çÂà∞ __tests__ ÁõÆÈåÑ'))
    process.exit(1)
  }

  console.log(colorize('green', '‚úÖ Ê∏¨Ë©¶Áí∞Â¢ÉÊ™¢Êü•ÈÄöÈÅé'))
}

// ÈÅãË°åÊ∏¨Ë©¶
function runTest(testType) {
  const config = testConfigs[testType]
  if (!config) {
    console.log(colorize('red', `‚ùå Êú™Áü•ÁöÑÊ∏¨Ë©¶È°ûÂûã: ${testType}`))
    showUsage()
    process.exit(1)
  }

  console.log(colorize('cyan', `\nüß™ ÈñãÂßãÈÅãË°å: ${config.name}`))
  console.log(colorize('yellow', `üìù Ë™™Êòé: ${config.description}`))
  console.log(colorize('blue', `üöÄ ÂëΩ‰ª§: ${config.command}\n`))

  try {
    execSync(config.command, {
      stdio: 'inherit',
      cwd: path.join(__dirname, '..'),
      env: {
        ...process.env,
        NODE_ENV: 'test',
        // Ê∏¨Ë©¶Áí∞Â¢ÉËÆäÊï∏
        JEST_TIMEOUT: '30000',
        DISABLE_ESLINT_PLUGIN: 'true',
      }
    })

    console.log(colorize('green', `\n‚úÖ ${config.name} ÈÅãË°åÊàêÂäü!`))

    // Â¶ÇÊûúÊòØË¶ÜËìãÁéáÊ∏¨Ë©¶ÔºåÈ°ØÁ§∫Â†±Âëä‰ΩçÁΩÆ
    if (testType === 'coverage' || testType === 'all' || testType === 'unit') {
      const coverageDir = path.join(__dirname, '..', 'coverage')
      if (fs.existsSync(coverageDir)) {
        console.log(colorize('cyan', `üìä Ë¶ÜËìãÁéáÂ†±ÂëäÂ∑≤ÁîüÊàê: ${coverageDir}/lcov-report/index.html`))
      }
    }

  } catch (error) {
    console.log(colorize('red', `\n‚ùå ${config.name} ÈÅãË°åÂ§±Êïó`))
    console.log(colorize('red', `ÈåØË™§: ${error.message}`))
    process.exit(1)
  }
}

// È°ØÁ§∫‰ΩøÁî®Ë™™Êòé
function showUsage() {
  console.log(colorize('cyan', '\nüìö AI Èä∑ÂîÆË≥¶ËÉΩÂπ≥Âè∞ - Ê∏¨Ë©¶ÈÅãË°åËÖ≥Êú¨'))
  console.log(colorize('yellow', '\nÁî®Ê≥ï: node scripts/run-tests.js [Ê∏¨Ë©¶È°ûÂûã]\n'))

  console.log(colorize('cyan', 'ÂèØÁî®ÁöÑÊ∏¨Ë©¶È°ûÂûã:'))
  Object.entries(testConfigs).forEach(([key, config]) => {
    console.log(`  ${colorize('green', key.padEnd(12))} - ${config.description}`)
  })

  console.log(colorize('yellow', '\nÁØÑ‰æã:'))
  console.log('  node scripts/run-tests.js unit        # ÈÅãË°åÂñÆÂÖÉÊ∏¨Ë©¶')
  console.log('  node scripts/run-tests.js auth        # ÈÅãË°åË™çË≠âÊ∏¨Ë©¶')
  console.log('  node scripts/run-tests.js ai          # ÈÅãË°å AI ÊúçÂãôÊ∏¨Ë©¶')
  console.log('  node scripts/run-tests.js all         # ÈÅãË°åÊâÄÊúâÊ∏¨Ë©¶')
  console.log('  node scripts/run-tests.js watch       # Áõ£Ë¶ñÊ®°Âºè')
}

// È°ØÁ§∫Ê∏¨Ë©¶Áµ±Ë®à
function showTestStats() {
  const testDir = path.join(__dirname, '..', '__tests__')
  if (!fs.existsSync(testDir)) {
    return
  }

  console.log(colorize('cyan', '\nüìà Ê∏¨Ë©¶Áµ±Ë®à:'))

  try {
    // Áµ±Ë®àÊ∏¨Ë©¶Êñá‰ª∂Êï∏Èáè
    const countFiles = (dir, pattern) => {
      const files = fs.readdirSync(dir, { recursive: true })
      return files.filter(file => file.toString().match(pattern)).length
    }

    const unitTests = countFiles(testDir, /\.test\.(js|ts)$/)
    const e2eTests = fs.existsSync(path.join(__dirname, '..', 'tests')) ?
      countFiles(path.join(__dirname, '..', 'tests'), /\.spec\.(js|ts)$/) : 0

    console.log(`  Ê∏¨Ë©¶Êñá‰ª∂Á∏ΩÊï∏: ${colorize('green', unitTests)}`)
    console.log(`  E2E Ê∏¨Ë©¶: ${colorize('green', e2eTests)}`)

  } catch (error) {
    console.log(colorize('yellow', '  ÁÑ°Ê≥ïÁµ±Ë®àÊ∏¨Ë©¶Êñá‰ª∂'))
  }
}

// ‰∏ªÂáΩÊï∏
function main() {
  const args = process.argv.slice(2)

  // È°ØÁ§∫ banner
  console.log(colorize('cyan', 'üß™ AI Sales Enablement Platform - Test Runner'))
  console.log(colorize('cyan', '=' .repeat(50)))

  // Ê™¢Êü•ÂèÉÊï∏
  if (args.length === 0 || args[0] === '--help' || args[0] === '-h') {
    showUsage()
    showTestStats()
    return
  }

  const testType = args[0].toLowerCase()

  // ÁâπÊÆäÂëΩ‰ª§ËôïÁêÜ
  if (testType === 'stats' || testType === 'status') {
    showTestStats()
    return
  }

  if (testType === 'clean') {
    console.log(colorize('yellow', 'üßπ Ê∏ÖÁêÜÊ∏¨Ë©¶Áõ∏ÈóúÊñá‰ª∂...'))
    try {
      execSync('rm -rf coverage .nyc_output test-results', {
        cwd: path.join(__dirname, '..')
      })
      console.log(colorize('green', '‚úÖ Ê∏ÖÁêÜÂÆåÊàê'))
    } catch (error) {
      console.log(colorize('red', '‚ùå Ê∏ÖÁêÜÂ§±Êïó'))
    }
    return
  }

  // Ê™¢Êü•ÂâçÁΩÆÊ¢ù‰ª∂
  checkPrerequisites()

  // È°ØÁ§∫Ê∏¨Ë©¶Áµ±Ë®à
  showTestStats()

  // ÈÅãË°åÊ∏¨Ë©¶
  runTest(testType)
}

// ÈåØË™§ËôïÁêÜ
process.on('unhandledRejection', (error) => {
  console.log(colorize('red', '\n‚ùå Êú™ËôïÁêÜÁöÑÈåØË™§:'))
  console.error(error)
  process.exit(1)
})

process.on('SIGINT', () => {
  console.log(colorize('yellow', '\n‚ö†Ô∏è Ê∏¨Ë©¶Ë¢´‰∏≠Êñ∑'))
  process.exit(0)
})

// Âü∑Ë°å
if (require.main === module) {
  main()
}

module.exports = { runTest, testConfigs }