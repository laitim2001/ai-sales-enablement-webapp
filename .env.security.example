# ================================================================
# 安全配置環境變數範例
# ================================================================
#
# 用途：Sprint 3 安全加固與合規功能配置
# 創建時間：2025-10-01
# 作者：Claude Code
#
# 使用說明：
# 1. 複製此文件為 .env.local 或 .env.production
# 2. 生成新的加密金鑰（見下方指令）
# 3. 在生產環境中使用環境變數或密鑰管理服務
# 4. 永遠不要將真實金鑰提交到版本控制系統
#
# ================================================================

# ----------------------------------------------------------------
# 資料加密配置
# ----------------------------------------------------------------

# 加密金鑰（256位 AES 金鑰，Base64 編碼）
# 生成新金鑰命令：
# node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
#
# ⚠️ 重要：
# - 生產環境必須設置此變數
# - 開發環境可以不設置（會自動生成，但不安全）
# - 金鑰一旦設置不應更改（會導致無法解密舊資料）
# - 金鑰輪換需要重新加密所有敏感資料
#
ENCRYPTION_KEY=

# 範例（請勿在生產環境使用）：
# ENCRYPTION_KEY=YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWE=

# ----------------------------------------------------------------
# 資料加密應用範圍
# ----------------------------------------------------------------

# 需要加密的客戶資料欄位（逗號分隔）
ENCRYPT_CUSTOMER_FIELDS=email,phone,address

# 需要加密的提案資料欄位（逗號分隔）
ENCRYPT_PROPOSAL_FIELDS=content,customer_notes

# 需要加密的用戶資料欄位（逗號分隔）
ENCRYPT_USER_FIELDS=

# ----------------------------------------------------------------
# RBAC 配置
# ----------------------------------------------------------------

# 啟用 RBAC 權限檢查（true/false）
ENABLE_RBAC=true

# 啟用資源擁有權檢查（true/false）
ENABLE_OWNERSHIP_CHECK=true

# 權限檢查模式（strict/lenient）
# strict: 嚴格模式，任何權限不足都會拒絕
# lenient: 寬鬆模式，僅記錄警告
RBAC_MODE=strict

# ----------------------------------------------------------------
# 審計日誌配置
# ----------------------------------------------------------------

# 啟用審計日誌（true/false）
ENABLE_AUDIT_LOG=true

# 審計日誌級別（all/sensitive/critical）
# all: 記錄所有操作
# sensitive: 僅記錄敏感操作（刪除、權限變更等）
# critical: 僅記錄關鍵操作（系統配置變更等）
AUDIT_LOG_LEVEL=sensitive

# 審計日誌保留天數
AUDIT_LOG_RETENTION_DAYS=365

# ----------------------------------------------------------------
# 安全頭部配置
# ----------------------------------------------------------------

# Content Security Policy (CSP) 模式（strict/moderate/lenient）
CSP_MODE=moderate

# 啟用 HSTS（HTTP Strict Transport Security）
ENABLE_HSTS=true

# HSTS 最大年齡（秒）
HSTS_MAX_AGE=31536000

# ----------------------------------------------------------------
# API Key 管理
# ----------------------------------------------------------------

# API Key 前綴（用於識別）
API_KEY_PREFIX=sk_live_

# API Key 默認過期天數（0表示永不過期）
API_KEY_DEFAULT_EXPIRY_DAYS=365

# API Key 默認速率限制（每小時請求數）
API_KEY_DEFAULT_RATE_LIMIT=1000

# ----------------------------------------------------------------
# Token 管理
# ----------------------------------------------------------------

# Refresh Token 過期天數
REFRESH_TOKEN_EXPIRY_DAYS=90

# Token 黑名單清理間隔（小時）
TOKEN_BLACKLIST_CLEANUP_INTERVAL=24

# ----------------------------------------------------------------
# 備份配置
# ----------------------------------------------------------------

# 啟用自動備份（true/false）
ENABLE_AUTO_BACKUP=true

# 備份間隔（小時）
BACKUP_INTERVAL_HOURS=24

# 備份保留份數
BACKUP_RETENTION_COUNT=30

# 備份存儲位置（local/s3/azure）
BACKUP_STORAGE=local

# 本地備份目錄
BACKUP_LOCAL_DIR=./backups

# Azure Blob Storage 配置（如使用 Azure 備份）
# AZURE_STORAGE_ACCOUNT=
# AZURE_STORAGE_KEY=
# AZURE_STORAGE_CONTAINER=backups

# ----------------------------------------------------------------
# GDPR/PDPA 合規配置
# ----------------------------------------------------------------

# 啟用隱私功能（true/false）
ENABLE_PRIVACY_FEATURES=true

# 資料保留天數（超過此天數自動刪除非活躍用戶資料）
DATA_RETENTION_DAYS=1095

# 啟用資料導出功能（true/false）
ENABLE_DATA_EXPORT=true

# 啟用資料刪除請求功能（true/false）
ENABLE_DATA_DELETION=true

# ----------------------------------------------------------------
# 安全掃描配置
# ----------------------------------------------------------------

# 啟用依賴漏洞掃描（true/false）
ENABLE_VULNERABILITY_SCAN=true

# 掃描間隔（小時）
VULNERABILITY_SCAN_INTERVAL=24

# ----------------------------------------------------------------
# 環境識別
# ----------------------------------------------------------------

# 環境類型（development/staging/production）
NODE_ENV=development

# 是否啟用調試模式
DEBUG_SECURITY=false

# ================================================================
# 金鑰生成工具腳本
# ================================================================
#
# 您可以使用以下腳本生成安全的金鑰：
#
# Node.js:
# node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
#
# OpenSSL:
# openssl rand -base64 32
#
# Python:
# python -c "import os, base64; print(base64.b64encode(os.urandom(32)).decode())"
#
# ================================================================
