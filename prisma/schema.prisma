// This is your Prisma schema file for AI Sales Enablement WebApp
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用戶模型
model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password_hash String
  first_name    String
  last_name     String
  role          UserRole @default(SALES_REP)
  department    String?
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  last_login    DateTime?

  // 關聯關係
  customers              Customer[]
  callRecords            CallRecord[]
  proposals              Proposal[]
  createdKnowledgeBase   KnowledgeBase[] @relation("KnowledgeCreator")
  updatedKnowledgeBase   KnowledgeBase[] @relation("KnowledgeUpdater")

  @@map("users")
  @@index([email, is_active], name: "IX_User_Email_Active")
  @@index([role, department], name: "IX_User_Role_Department")
}

// 客戶模型
model Customer {
  id                 Int             @id @default(autoincrement())
  company_name       String
  email              String?
  phone              String?
  website            String?
  industry           String?
  company_size       CompanySize?
  status             CustomerStatus  @default(PROSPECT)
  assigned_user_id   Int?
  notes              String?
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt

  // 關聯關係
  assignedUser       User?           @relation(fields: [assigned_user_id], references: [id])
  callRecords        CallRecord[]
  proposals          Proposal[]
  documents          Document[]
  interactions       Interaction[]

  @@map("customers")
  // 核心查詢索引（基於第18章架構設計）
  @@index([company_name, email, created_at], name: "IX_Customer_Search")
  @@index([status, assigned_user_id], name: "IX_Customer_Status_User")
  @@index([industry, company_size], name: "IX_Customer_Industry_Size")
  @@index([created_at], name: "IX_Customer_Created")
}

// 通話記錄模型
model CallRecord {
  id           Int           @id @default(autoincrement())
  customer_id  Int
  user_id      Int
  call_date    DateTime
  duration     Int?          // 通話時長（秒）
  outcome      CallOutcome?
  summary      String?
  action_items String?
  recording_url String?
  status       CallStatus   @default(SCHEDULED)
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt

  // 關聯關係
  customer     Customer     @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [user_id], references: [id])

  @@map("call_records")
  // 效能優化索引（基於第18章設計）
  @@index([customer_id, call_date(sort: Desc)], name: "IX_Call_Customer_Date")
  @@index([customer_id, status, call_date], name: "IX_CallRecord_Complex")
  @@index([user_id, call_date], name: "IX_Call_User_Date")
  @@index([outcome, call_date], name: "IX_Call_Outcome_Date")
}

// 提案模型
model Proposal {
  id           Int            @id @default(autoincrement())
  customer_id  Int
  user_id      Int
  title        String
  description  String?
  status       ProposalStatus @default(DRAFT)
  total_value  Decimal?       @db.Decimal(15, 2)
  currency     String?        @default("USD")
  version      Int            @default(1)
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  sent_at      DateTime?
  approved_at  DateTime?

  // 關聯關係
  customer     Customer       @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [user_id], references: [id])
  items        ProposalItem[]

  @@map("proposals")
  // 提案查詢優化索引
  @@index([customer_id, status, created_at(sort: Desc)], name: "IX_Proposal_Status_Date")
  @@index([user_id, status], name: "IX_Proposal_User_Status")
  @@index([total_value, currency], name: "IX_Proposal_Value")
}

// 提案項目模型
model ProposalItem {
  id          Int      @id @default(autoincrement())
  proposal_id Int
  name        String
  description String?
  quantity    Int      @default(1)
  unit_price  Decimal  @db.Decimal(10, 2)
  total_price Decimal  @db.Decimal(15, 2)
  created_at  DateTime @default(now())

  // 關聯關係
  proposal    Proposal @relation(fields: [proposal_id], references: [id], onDelete: Cascade)

  @@map("proposal_items")
  @@index([proposal_id], name: "IX_ProposalItem_Proposal")
}

// 知識庫文檔模型
model KnowledgeBase {
  id            Int                   @id @default(autoincrement())
  title         String
  content       String?               // 純文字內容（用於搜索）
  file_path     String?               // 原始檔案路徑
  file_size     Int?                  // 檔案大小 (bytes)
  mime_type     String?               // MIME類型
  hash          String?               @unique // 內容哈希，用於重複檢測
  version       Int                   @default(1)
  status        DocumentStatus        @default(ACTIVE)
  category      DocumentCategory      @default(GENERAL)
  source        String?               // 來源系統/路徑
  author        String?               // 文檔作者
  language      String?               @default("zh-TW") // 語言代碼
  metadata      Json?                 // 額外元數據
  processing_status ProcessingStatus  @default(PENDING)
  processing_error  String?           // 處理錯誤訊息
  created_at    DateTime              @default(now())
  updated_at    DateTime              @updatedAt
  created_by    Int?                  // 創建者ID
  updated_by    Int?                  // 更新者ID

  // 關聯關係
  creator       User?                 @relation("KnowledgeCreator", fields: [created_by], references: [id])
  updater       User?                 @relation("KnowledgeUpdater", fields: [updated_by], references: [id])
  chunks        KnowledgeChunk[]      // 內容分塊
  tags          KnowledgeTag[]        // 標籤關聯
  processing_tasks ProcessingTask[]   // 處理任務

  @@map("knowledge_base")
  @@index([status, category], name: "IX_KB_Status_Category")
  @@index([processing_status], name: "IX_KB_Processing_Status")
  @@index([created_at], name: "IX_KB_Created")
  @@index([hash], name: "IX_KB_Hash")
  @@index([source, version], name: "IX_KB_Source_Version")
}

// 知識庫內容分塊模型（支援向量搜索）
model KnowledgeChunk {
  id                Int           @id @default(autoincrement())
  knowledge_base_id Int
  chunk_index       Int           // 在文檔中的順序
  content           String        // 分塊內容
  content_hash      String        // 內容哈希
  vector_embedding  String?       // 向量嵌入（JSON格式儲存）
  token_count       Int?          // Token數量
  start_pos         Int?          // 在原文檔中的起始位置
  end_pos           Int?          // 在原文檔中的結束位置
  metadata          Json?         // 分塊元數據
  created_at        DateTime      @default(now())

  // 關聯關係
  knowledge_base    KnowledgeBase @relation(fields: [knowledge_base_id], references: [id], onDelete: Cascade)

  @@map("knowledge_chunks")
  @@unique([knowledge_base_id, chunk_index], name: "UK_Chunk_KB_Index")
  @@index([knowledge_base_id], name: "IX_Chunk_KB")
  @@index([content_hash], name: "IX_Chunk_Hash")
  // 向量相似度搜索索引（需要 pgvector 擴展）
  @@index([vector_embedding], name: "IX_Chunk_Vector", type: Hash)
}

// 知識庫標籤模型
model KnowledgeTag {
  id             Int                   @id @default(autoincrement())
  name           String                @unique
  description    String?
  color          String?               // 標籤顏色
  parent_id      Int?                  // 父標籤ID (支援階層)
  is_system      Boolean               @default(false) // 系統標籤
  usage_count    Int                   @default(0) // 使用次數
  created_at     DateTime              @default(now())
  updated_at     DateTime              @updatedAt

  // 關聯關係
  parent         KnowledgeTag?         @relation("TagHierarchy", fields: [parent_id], references: [id])
  children       KnowledgeTag[]        @relation("TagHierarchy")
  knowledge_base KnowledgeBase[]       // 多對多關聯

  @@map("knowledge_tags")
  @@index([parent_id], name: "IX_Tag_Parent")
  @@index([is_system, usage_count], name: "IX_Tag_System_Usage")
}

// 文檔處理任務模型
model ProcessingTask {
  id                Int              @id @default(autoincrement())
  knowledge_base_id Int?
  task_type         ProcessingType
  status            ProcessingStatus @default(PENDING)
  progress          Float            @default(0) // 0-1 的進度
  total_items       Int?             // 總項目數
  processed_items   Int?             // 已處理項目數
  error_message     String?          // 錯誤訊息
  error_details     Json?            // 詳細錯誤信息
  started_at        DateTime?        // 開始時間
  completed_at      DateTime?        // 完成時間
  metadata          Json?            // 任務元數據
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt

  // 關聯關係
  knowledge_base    KnowledgeBase?   @relation(fields: [knowledge_base_id], references: [id])

  @@map("processing_tasks")
  @@index([status, task_type], name: "IX_Task_Status_Type")
  @@index([knowledge_base_id], name: "IX_Task_KB")
  @@index([created_at], name: "IX_Task_Created")
}

// 文檔模型（保留原有功能，但與KnowledgeBase分開）
model Document {
  id          Int          @id @default(autoincrement())
  customer_id Int?
  title       String
  content     String?
  file_path   String?
  file_size   Int?
  mime_type   String?
  category    DocumentType @default(OTHER)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  // 關聯關係
  customer    Customer?    @relation(fields: [customer_id], references: [id], onDelete: Cascade)

  @@map("documents")
  @@index([customer_id, category], name: "IX_Document_Customer_Category")
  @@index([created_at], name: "IX_Document_Created")
}

// 客戶互動記錄
model Interaction {
  id          Int             @id @default(autoincrement())
  customer_id Int
  type        InteractionType
  description String
  metadata    Json?           // 存儲額外的互動數據
  created_at  DateTime        @default(now())

  // 關聯關係
  customer    Customer        @relation(fields: [customer_id], references: [id], onDelete: Cascade)

  @@map("interactions")
  @@index([customer_id, type, created_at], name: "IX_Interaction_Customer_Type")
}

// AI 分析結果模型
model AIAnalysis {
  id              Int      @id @default(autoincrement())
  entity_type     String   // 'customer', 'call', 'proposal' 等
  entity_id       Int
  analysis_type   String   // 'sentiment', 'priority', 'recommendation' 等
  result          Json     // 分析結果
  confidence      Float?   // 置信度
  created_at      DateTime @default(now())

  @@map("ai_analyses")
  @@index([entity_type, entity_id], name: "IX_AI_Entity")
  @@index([analysis_type, created_at], name: "IX_AI_Type_Date")
}

// 系統配置模型
model SystemConfig {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  description String?
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("system_configs")
  @@index([key, is_active], name: "IX_Config_Key_Active")
}

// 審計日誌模型
model AuditLog {
  id          Int      @id @default(autoincrement())
  user_id     Int?
  entity_type String
  entity_id   Int?
  action      String
  old_values  Json?
  new_values  Json?
  ip_address  String?
  user_agent  String?
  created_at  DateTime @default(now())

  @@map("audit_logs")
  @@index([user_id, created_at], name: "IX_Audit_User_Date")
  @@index([entity_type, entity_id], name: "IX_Audit_Entity")
  @@index([action, created_at], name: "IX_Audit_Action_Date")
}

// 枚舉定義
enum UserRole {
  ADMIN
  SALES_MANAGER
  SALES_REP
  MARKETING
  VIEWER
}

enum CustomerStatus {
  PROSPECT
  QUALIFIED
  OPPORTUNITY
  CUSTOMER
  INACTIVE
}

enum CompanySize {
  STARTUP      // 1-10 employees
  SMALL        // 11-50 employees
  MEDIUM       // 51-200 employees
  LARGE        // 201-1000 employees
  ENTERPRISE   // 1000+ employees
}

enum CallOutcome {
  SUCCESSFUL
  NO_ANSWER
  BUSY
  VOICEMAIL
  CALLBACK_REQUESTED
  NOT_INTERESTED
  FOLLOW_UP_NEEDED
}

enum CallStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum ProposalStatus {
  DRAFT
  SENT
  VIEWED
  UNDER_REVIEW
  APPROVED
  REJECTED
  EXPIRED
}

enum DocumentType {
  CONTRACT
  PROPOSAL
  PRESENTATION
  REPORT
  EMAIL
  NOTE
  OTHER
}

enum InteractionType {
  EMAIL
  PHONE_CALL
  MEETING
  DEMO
  WEBSITE_VISIT
  DOCUMENT_VIEW
  PROPOSAL_VIEW
  OTHER
}

// 知識庫相關枚舉
enum DocumentStatus {
  ACTIVE      // 正常狀態
  INACTIVE    // 已停用
  ARCHIVED    // 已歸檔
  DELETED     // 已刪除
  DRAFT       // 草稿
}

enum DocumentCategory {
  GENERAL          // 一般文檔
  PRODUCT_SPEC     // 產品規格
  SALES_MATERIAL   // 銷售資料
  TECHNICAL_DOC    // 技術文檔
  LEGAL_DOC        // 法律文件
  TRAINING         // 培訓資料
  FAQ              // 常見問題
  CASE_STUDY       // 案例研究
  WHITE_PAPER      // 白皮書
  PRESENTATION     // 簡報
  COMPETITOR       // 競爭對手資料
  INDUSTRY_NEWS    // 行業新聞
  INTERNAL         // 內部文檔
}

enum ProcessingStatus {
  PENDING      // 等待處理
  PROCESSING   // 處理中
  COMPLETED    // 完成
  FAILED       // 失敗
  CANCELLED    // 已取消
  RETRY        // 重試中
}

enum ProcessingType {
  DOCUMENT_PARSE      // 文檔解析
  VECTORIZATION       // 向量化處理
  CONTENT_EXTRACTION  // 內容提取
  METADATA_EXTRACTION // 元數據提取
  DUPLICATE_CHECK     // 重複檢查
  INDEX_UPDATE        // 索引更新
  BATCH_IMPORT        // 批次導入
}